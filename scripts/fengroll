#!/usr/bin/perl -w
$version = '$Id$';
#
# fengroll -- A Calvin bot for Feng Shui dice rolling.
#             Copyright 1996 by Russ Allbery <rra@cs.stanford.edu>
#
# This program is free software; you can redistribute it and/or modify it
# under the same terms as Perl itself.

require 5.001;
use Calvin;
use strict;
use vars qw($calvin $version);

$calvin  = new Calvin;

{
    my $host    = shift || 'eyrie.org';
    my $port    = shift || 2056;
    my $channel = shift || 4;
    my $nick    = shift || 'FR';
    my $retry   = 1;
    
    srand ($$ ^ time);

    # Set up the fallback nick handler.
    my $fallback = sub { return ($_[0] =~ s/(\d)*$/$1 + 1/e) };
    
    # Loop forever, since the bot should never exit except through manual
    # intervention.
    while (1) {
	if ($calvin->connect ($host, $port, $nick, $fallback)) {
	    $calvin->raw_send ("/join 4\n");
	    
	    # The actual guts of the bot.  We scan for messages that request
            # some action and perform that action.
	    my $line;
	    my @pluses = ();
	    while ($calvin->raw_read (\$line)) {
		# First check for a @msg of the form "*User* message".  Make
		# sure we don't match system messages.
		if ($line =~ /^\*([^* ]|[^ ]{2,})\* (.*)/) {
		    my $user    = $1;
		    my $message = $2;
		  
		    # Ignore all messages from ourself or from another bot.
		    next if ($user eq $nick);
		    next if ($message =~ /^- /);

		    # Handle commands.
		    if ($message =~ /^help/i) {
			&send_help ($user);
		    } elsif ($message =~ /^(f)?roll((\s+[+-]\d+)+)?/i) {
			my $fortune = $1 ? 1 : 0;
			my $pluses = $2;
			my @pluses = ($pluses =~ /([+-]\d+)/g) if $pluses;
			&do_roll ($user, $fortune, @pluses);
		    } elsif ($message =~ /^quit/) {
			&send_quit ($user);
			$calvin->shutdown;
			exit;
		    } else {
			&send_unknown ($user);
		    }
		}
	    }

	    # When we reach this point, we've lost our connection.  Reset
	    # the various "keep-trying-to-connect" variables.
	    $retry = 1;
	}
	
	# Wait a bit before trying to reconnect.
	sleep $retry;
	
	# Exponential backoff in the waiting time, up to ~15 minutes
	if ($retry < 1024) { $retry *= 2 }
    }
}
    
# Send the help message.
sub send_help {
    my ($user) = @_;
    $calvin->raw_send ("/msg $user - Commands: ROLL FROLL\n");
}

# Send response to unknown command.
sub send_unknown {
    my ($user) = @_;
    $calvin->raw_send ("/msg $user - I don't understand.\n");
}

# Send a quit message.
sub send_quit {
    my ($user) = @_;
    $calvin->raw_send ("/quit Exiting at ${user}'s request\n");
}

# Do a Feng Shui dice roll.
sub do_roll {
    my ($user, $fortune, @pluses) = @_;
    my (@d1, @d2, $reroll, $extra, $cmsg);
    my $except = 0;
    my $total = 0;
    
    do {
	undef $reroll;
	push (@d1, int (rand (6)) + 1);
	push (@d2, int (rand (6)) + 1);
	if ($d1[$#d1] == 6 && $d2[$#d2] == 6) {
	    $except += 1;
	    $reroll = 1;
	} elsif ($d1[$#d1] == 6) {
	    do {
		$extra = int (rand (6)) + 1;
		push (@d1, $extra);
	    } while ($extra == 6);
	} elsif ($d2[$#d2] == 6) {
	    do {
		$extra = int (rand (6)) + 1;
		push (@d2, $extra);
	    } while ($extra == 6);
	}
    } while ($reroll);
    map { $total += $_ } @d1;
    map { $total -= $_ } @d2;
    map { $total += $_ } @pluses;
    if ($fortune) {
	$fortune = int (rand (6)) + 1;
	$total += $fortune;
    }
    $total = "+$total" if ($total > 0);
    $total = " 0" if ($total == 0);
    $cmsg = $except ? ' (exceptional)' : '';
    if ($fortune) {
	$calvin->raw_send ("$user rolled $total$cmsg (+@d1, -@d2) " .
			   "(Fortune +$fortune) @pluses\n");
    } else {
	$calvin->raw_send ("$user rolled $total$cmsg (+@d1, -@d2) " .
			   "@pluses\n");
    }
}
